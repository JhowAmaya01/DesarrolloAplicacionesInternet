@* Pages/Clientes.razor *@
@page "/clientes"
@inject ClienteServicio clienteServicio
@inject IJSRuntime jsRuntime
<h3>Clientes</h3>
<NavLink class="nav-link" href="cliente/agregar">
    <span class="oi oi-plus" aria-hidden="true">Agregar cliente</span>
</NavLink>
<label>Buscar cliente:</label>
<input type="text" @oninput="@( (e) => Filtro(e) )">

<div class="row">
    <div class="col-md-12">
        <table class="table table-hover">
        <thead>
            <tr>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Genero</th>
            <th>Fecha Nacimiento</th>
            <th>Correo</th>
            <th>Telefono</th>
            <th>Nombre Completo</th>
            <th>Edad</th>
            <th>Acci√≥n</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var cliente in clientes) {
                <tr>
                <td>@cliente.Nombre</td>
                <td>@cliente.Apellido</td>
                <td>@cliente.Genero</td>
                <td>@cliente.FechaCumple.ToString("dd-MMM-yyyy")</td>
                <td>@cliente.Correo</td>
                <td>@cliente.Telefono</td>
                <td>@cliente.NombreCompleto</td>
                <td>@cliente.Edad4</td>
                <td>

                <a href="cliente/editar/@cliente.Id" class="btn btn-success">Editar</a>

                <a class="btn btn-danger" @onclick="async ()=> await Borrar(cliente)">Borrar</a>
                </td>
                </tr>
            }
        </tbody>
        </table>
        <p>Total de Clientes = @TotCli().ToString()</p> <! Aqui va algo para mostrar el total>
        <p>Total de Clientes Hombres = @TotH().ToString()</p>
        <p>Total de Clientes Mujeres = @TotM().ToString()</p>
        <p>Promedio de edad de los clientes = @PromEd().ToString()</p>
    </div>
</div>

@code {
    private List<Cliente> clientes = new();
    protected override void OnInitialized() {
        clientes = clienteServicio.ObtenerTodo("");
    }
    private async Task Borrar(Cliente cliente) {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Estas seguro????");
        if (confirmed)
            if(clienteServicio.Borrar(cliente.Id))
                clientes.Remove(cliente);
    }
    protected void Filtro(ChangeEventArgs e) {
        string cadenabuscar = e.Value.ToString();
        clientes = clienteServicio.ObtenerTodo(cadenabuscar);
    }
    private double TotCli() {
        return clienteServicio.Total();
    }
    private double TotH() {
        return clienteServicio.TotalHo();
    }
    private double TotM() {
        return clienteServicio.TotalMu();
    }
    private double PromEd() {
        double tot = 0;
        foreach(var clientes in clientes){
            tot += clientes.Edad4;
        }
        return tot/clienteServicio.Total();
    }
}