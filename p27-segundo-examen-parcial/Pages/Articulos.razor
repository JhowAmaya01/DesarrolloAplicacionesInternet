@page "/articulos"
@inject ArticuloServicio articuloServicio
@inject IJSRuntime jsRuntime
<h3>Articulos</h3>

<NavLink class="nav-link" href="articulo/agregar">
<span class="oi oi-plus" aria-hidden="true">Agregar Articulo</span>
</NavLink>
<div class="row">
    <div class="col-md-6">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Descripcion</th>
                    <th>Fecha Alta</th>
                    <th>Cantidad</th>
                    <th>Precio</th>
                    <th>Unidad de medida</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var articulo in articulos)
                {
                <tr>
                    <td>@articulo.Descripcion</td>
                    <td>@articulo.FechaAlta</td>
                    <td>@articulo.Cantidad</td>
                    <td>@articulo.Precio</td>
                    <td>@articulo.UdeMedida</td>
                    <td>
                    <a href="articulo/editar/@articulo.Id" class="btn btn-success">Editar</a>
                    <a class="btn btn-danger" @onclick="async ()=> await Borrar(articulo)">Borrar</a>
                    </td>
                </tr>
                }
             </tbody>
        </table>
        <p>Total del inventario = $@Tot ></p> <! Aqui va algo para mostrar el total>
    </div>
</div>

@code {
    private List<Articulo> articulos = new();
    protected override void OnInitialized()
    {
        articulos = articuloServicio.ObtenerTodo();
    }
    private async Task Borrar(Articulo articulo) {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Estas seguro????");
        if (confirmed)
        if(articuloServicio.Borrar(articulo.Id))
        articulos.Remove(articulo);
    }
    private async Task Tot(Articulo articulo) {
       double total = articuloServicio.Total();
       //return total;
    }
}